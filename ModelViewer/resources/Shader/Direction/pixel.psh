struct PS_IN
{
    float4 pos : SV_POSITION;
    float2 tex : TEXCOORD0;
    float4 lightTangentDirect : TEXCOORD1;
    float4 eyeTangentDirect : TEXCOORD2;
};
 
cbuffer ConstantBuffer
{
    float4x4 World;         //ワールド変換行列
    float4x4 View;          //ビュー変換行列
    float4x4 Projection;    //透視射影変換行列
    float4   Light;
    float4   LightColor;
    float4   Eye;
}

Texture2D BaseMap : register(t0);
Texture2D NormalMap : register(t1);
Texture2D RoughnessMap : register(t2);
Texture2D MetallicMap : register(t3);
Texture2D HeightMap : register(t4);
SamplerState Sampler : register(s0);

float CalculateDGGX(float alpha, float nh){
    float buf = ( ( alpha * alpha - 1.f ) * (nh * nh) ) + 1.f;
    return (alpha * alpha) / (3.141592653589f * buf * buf);
}

float CalculateLammdaGGX(float3 x, float3 n, float alpha){
    float dot2 = dot( x,n );
    dot2 *= dot2;
    float root = sqrt( 1.f + (alpha * alpha) * ( 1.f / dot2 - 1.f ) );
    return ( root - 1.f ) / 2.f;
}

float CalculateGGGX(float3 l, float3 v, float3 n, float alpha){
    return 1.f / ( 1.f + CalculateLammdaGGX(l, n, alpha) + CalculateLammdaGGX(v, n, alpha) );
}

float CalculateFresnel(float fres, float3 v, float3 h){
    float buf = abs( 1.f - dot(v, h) );
    return fres + (1.f - fres) * buf * buf * buf * buf * buf;
}

float4 ps_direction( PS_IN input ) : SV_Target
{
    float maxHeight = 0.001f;
    float divisionHeight = 0.0001f;

    float3 eye = normalize(input.eyeTangentDirect.xyz);

    // スクリーン空間の勾配
    float2 dx, dy;
    dx = ddx( input.tex );
    dy = ddy( input.tex );

	
    float3 normal;
    // 視差遮蔽マッピング
    float2 tex = input.tex;
    float2 offset = eye.xy * divisionHeight;
    float height = 0.f;
    bool flag = false;
    //[loop] while( !flag ){
	int i;
	for(i=0;i<100;++i){
        // 高さの比較
        if( HeightMap.SampleGrad(Sampler, tex, dx, dy).r * maxHeight <= height ){
            // 法線ベクトルの取得
            normal = NormalMap.SampleGrad(Sampler, tex, dx, dy).rgb;
            normal = float3(2.f * normal.x - 1.f, 2.f * normal.y - 1.f, 2.f * normal.z - 1.f);

            flag = true;
        }

        tex += offset;
        height += eye.z * divisionHeight;
    }

    // メタリック
    float metallic = MetallicMap.SampleGrad(Sampler, tex, dx, dy).r;

    // 明度算出 bright
    float bright = dot(input.lightTangentDirect.xyz, normal);
    bright = max(0.f, bright);
    bright = 0.8f * bright + 0.2f;

    // cookTorrance
    float3 L = input.lightTangentDirect.xyz;
    float3 N = normal;
    float3 V = input.eyeTangentDirect.xyz;
    float3 H = normalize( L + V );
    float alpha = RoughnessMap.Sample(Sampler, tex).r;
    //return float4(alpha, alpha, alpha, 1.f);
    alpha *= alpha;
    // 法線分布
    float D = CalculateDGGX(alpha, dot(N,H) );
    // 幾何減衰項
    float G = CalculateGGGX(L, V, N, alpha);
    // フレネル項
    float F = CalculateFresnel(0.95f, V, H);

    // 鏡面反射光
    float specularStrength = max(0.f, (D*G*F) / ( 4.f * dot(N, V) * dot(N, L) ) );
    specularStrength *= metallic;

    // ベースカラーの取得
    float4 baseColor = BaseMap.Sample(Sampler, tex);
    baseColor *= bright * (1.f - metallic);
    baseColor = float4(baseColor.r * LightColor.r, baseColor.g * LightColor.g, baseColor.b * LightColor.b, 1.f);

    float3 specular = specularStrength * LightColor.rgb;

    return float4(specular + baseColor.rgb, 1.f);
}